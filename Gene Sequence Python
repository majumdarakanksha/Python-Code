import numpy as np


TerB_Kpneu = 'TTGGCTGGGGGTTTCGCTGGTCCAGAGGTTCCAAATAAACGCAATGATGAGGGTATGAGAATGAGTTTTTTCGACAAAGTCAAAGGGGCTTTGACCTCGGGTCGTGAGGAATTGACCCGCCAGGTAGGCCGTTACAAAAACAAGAAATTTATGCAGGGTACCGTCGCGGTATGCGCCCGTATCGCTGTTGCCAGTGACGGCGTTAGCTCCGAAGAAAAACAGAAGATGATTGGATTTCTGCGATCCTCAGAAGAGCTGAAAGTCTTCGATACAGCAGAAGTTATCGAATTTTTTAACAAGCTGGTGACCAGTTTCGACTTTGATCTGGAAATCGGAAAAGGCGAAACGATGAAATATATCCTCGCCCTGAAAGACCAGCCAGAGGCAGCTCAACTGGCTCTTCGTGTCGGTATTGCTGTCGCTAAAAGTGATGGCAACTTCGATGATGATGAGAAGAGTGCTGTCCGTGAAATTGCCCGTTCGCTGGGTTTCGACCCGGCTGAATTTGGCCTCTGA'

print('Sequence of interest:', TerB_Kpneu)

print()

#Finding frequency of neucleotides in DNA segment
def frequency_string(string):
  mydict = {}
  for word in string:
    if word in mydict:
      mydict[word] += 1
    else:
      mydict[word] = 1
  
  return mydict

print('Frequencey of nucleotides:', frequency_string(TerB_Kpneu))

print()

#Converting DNA to RNA
def dnatorna(string):
  rna = ''
  for letter in string:
    if letter == 'T':
      rna += 'U'
    else:
      rna += letter
  return rna

print ('RNA sequence:', dnatorna(TerB_Kpneu))

#Producing the reverse complement of a DNA segment
def revcomp(string):
  revstring = string[::-1] 
  revcompstring = ''
  for letter in revstring:
    if letter == 'A':
      revcompstring += 'T'
    elif letter == 'C':
      revcompstring += 'G'
    elif letter == 'G':
      revcompstring += 'C'
    elif letter == 'T':
      revcompstring += 'A'

  return revcompstring

print()

print ('Reverse complement sequence:', revcomp(TerB_Kpneu))

print()

#Finding out GC content
def gccont(string):
  cgcount = 0
  for letter in string:
    if letter == 'C':
      cgcount += 1
    elif letter == 'G':
      cgcount += 1
  
  return (cgcount)

print('GC Content(%) :', ((gccont(TerB_Kpneu))/(len(TerB_Kpneu))))

print()

#Finding the hamming distance- Difference in neucleotides from two different DNA segments 
stringone = 'GAGCCTACTAACGGGAT'
stringtwo = 'CATCGTAATGACGGCCT'

def hamming(stringone, stringtwo):
  counter = 0
  for i in (range(len(stringone))):
    if stringone[i] != stringtwo[i]:
      counter += 1
    else:
      counter = counter

  return(counter)

print('Hamming Distance :', hamming(stringone, stringtwo))

print()

#Finding out protein sequence based on neucleotide sequence
aatable = table = {'ATA':'I', 'ATC':'I', 'ATT':'I', 'ATG':'M','ACA':'T', 'ACC':'T', 'ACG':'T', 'ACT':'T','AAC':'N', 'AAT':'N', 'AAA':'K', 'AAG':'K','AGC':'S', 'AGT':'S', 'AGA':'R', 'AGG':'R','CTA':'L', 'CTC':'L', 'CTG':'L', 'CTT':'L','CCA':'P', 'CCC':'P', 'CCG':'P', 'CCT':'P','CAC':'H', 'CAT':'H', 'CAA':'Q', 'CAG':'Q','CGA':'R', 'CGC':'R', 'CGG':'R', 'CGT':'R','GTA':'V', 'GTC':'V', 'GTG':'V', 'GTT':'V','GCA':'A', 'GCC':'A', 'GCG':'A', 'GCT':'A','GAC':'D', 'GAT':'D', 'GAA':'E', 'GAG':'E','GGA':'G', 'GGC':'G', 'GGG':'G', 'GGT':'G','TCA':'S', 'TCC':'S', 'TCG':'S', 'TCT':'S','TTC':'F', 'TTT':'F', 'TTA':'L', 'TTG':'L','TAC':'Y', 'TAT':'Y', 'TAA':'','TAG':'','TGC':'C', 'TGT':'C', 'TGA':'','TGG':'W'}


def genetoprotein(string):
  protein = ''
  for i in range(0, len(string), 3):
    codon = string[i:i+3]
    protein += aatable[codon]

  return protein

print('Protein Sequence:', genetoprotein(TerB_Kpneu))

print()

#Identifying motif and position that it occurs
stringthree = 'GATATATGCATATACTT'
seq = 'ATAT'

def motif(string, seq):
  count = 0
  position = []
  for i in range(len(string)-4):
    if string[i:i+4] == seq:
      count += 1
      position = position + [i]
    
  return (count,position)

print('Motif number and position:',motif(stringthree, seq))

print()

#Identifying consensus sequence and table of most frequent neucleotide at each position of the DNA segment
strings = ['ATCCAGCT','GGGCAACT','ATGGATCT','AAGCAACC','TTGGAACT','ATGCCATT','ATGGCACT']

def consensus(matrix):
  A,G,C,T = [],[],[],[]
  
  for i in range(len(matrix[0])): 
    a,g,c,t = 0,0,0,0
    
    for j in (range(len(matrix))):
      #print(range(len(matrix[i])))
      if matrix[j][i] == 'A':
        a += 1
      elif matrix[j][i] == 'G':
        g += 1  
      elif matrix[j][i] == 'C':
        c += 1
      elif matrix[j][i] == 'T':
        t += 1 
    
    A = A + [a]  
    G = G + [g]
    C = C + [c]
    T = T + [t]
    
  new_matrix = np.array([A,G,C,T])
  
  #print(new_matrix) 
  
  transposed_matrix = new_matrix.transpose()
  #print(transposed_matrix)

  consensus = ''

  for i in range(len(transposed_matrix)):
    if transposed_matrix[i][0] == max(transposed_matrix[i]):
      consensus += 'A'

    elif transposed_matrix[i][1] == max(transposed_matrix[i]):
      consensus += 'G'

    elif transposed_matrix[i][2] == max(transposed_matrix[i]):
      consensus += 'C'

    elif transposed_matrix[i][3] == max(transposed_matrix[i]):
      consensus += 'T'    

  print('Consensus sequence', consensus) 
  return('A:',A, 'G:', G, 'C:', C, 'T:', T)

print(consensus(strings))

#global alignment code 

alignone = 'AAG'
aligntwo = 'AG'

'''created table code for original and backtrack table'''
def initializetable(a1,a2):
  inttable = []
  
  for i in range(len(a1)+1):
    inttable = inttable + [[0]*(len(a2)+1)]
  
  return inttable
  
'''Global alignmnet code. Based one the Smith-Waterman Algorithm.
First make table with scores based on indel, then make backtrack matrix to determine which direction in the matrix to move (d,s,e). 
Based on backtrack code the segments should align with '-' for spaces that do not align''' 

def globalaling(align1,align2,penalty,point):
  ntable = initializetable(align1,align2)
  backtrack = initializetable(align1,align2)
  #print(backtrack)
  
  lenalign1 = (len(align1)+1)
  lenalign2 = (len(align2)+1)
  for i in range(lenalign1):
    for j in range(lenalign2):
      if i == 0:
        if j == 0:
          ntable[i][j] = 0
        elif j!= 0:
          ntable[i][j] = ntable[i][j-1] + penalty
          backtrack[i][j] = 'e'
      elif i != 0:
        if j == 0:
          ntable [i][j] = ntable[i-1][j] + penalty
          backtrack[i][j] = 's'
        
        elif j!= 0:
          if align1[i-1] == align2[j-1]:
            ntable[i][j] = max((ntable[i-1][j-1]+point),(ntable[i][j-1]+ penalty),(ntable[i-1][j]+penalty))
            if ntable[i][j] == ntable[i][j-1] + penalty:
              backtrack[i][j] = 'e'
            elif ntable[i][j] == ntable[i-1][j] + penalty:
              backtrack[i][j] = 's'
            elif ntable[i][j] == ntable[i-1][j-1] + point:
              backtrack[i][j] = 'd'
          
          elif align1[i-1] != align2[j-1]:
            ntable[i][j] = max((ntable[i-1][j-1]+penalty), (ntable[i][j-1]+penalty),(ntable[i-1][j]+penalty))
            if ntable[i][j] == ntable[i][j-1]+penalty:
              backtrack[i][j] = 'e'
            elif ntable[i][j] == ntable[i-1][j]+penalty:
              backtrack[i][j] = 's'
            elif ntable[i][j] == ntable[i-1][j-1] + penalty:
              backtrack[i][j] = 'd'
  
  
  new_align1 = ''
  new_align2 = ''
  i = len(align1)
  j = len(align2)
  
  print()
  while i > 0 or j > 0:
    if backtrack[i][j] == 'e':
      new_align1 += '-'
      new_align2 += align2[j - 1]
      j = j - 1
    elif backtrack[i][j] == 's':
      new_align1 += align1[i-1]
      new_align2 +=  '-'
      i = i - 1
    elif backtrack[i][j] == 'd':
      new_align1 += align1[i - 1]
      new_align2 += align2[j - 1]
      i = i - 1
      j = j - 1
    

  #print(new_align1," " ,new_align2)
  new_align1 = reverse(new_align1)
  new_align2 = reverse(new_align2)      

  return (new_align1, new_align2)

print(globalaling(alignone,aligntwo,-1,1))
  
  return
  
  
